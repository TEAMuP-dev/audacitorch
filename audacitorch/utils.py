from typing import Tuple, List, Optional, Type, Any, Dict
import random
from typing import Tuple

import torch

def get_example_inputs(multichannel: bool = False):
  """
  returns a list of possible input tensors for an TensorJuceModel. 

  Possible inputs are audio tensors with shape (n_channels, n_samples). 
  If multichannel == False, n_channels will always be 1. 
  """
  max_channels = 2 if multichannel else 1
  num_inputs = 10
  channels = [random.randint(1, max_channels) for _ in range(num_inputs)]
  sizes = [random.randint(2048, 396000) for _ in range(num_inputs)]
  return [
    torch.randn((c, s)) for c, s in  zip(channels, sizes)
  ]

def get_list_type(lst: List[Any]) -> Type:
    """generated by gpt4"""
    if not lst:  # If the list is empty
        return List[Any]  # We can't infer anything about its contents
    if all(isinstance(i, type(lst[0])) for i in lst):  # If all elements have the same type
        return List[type(lst[0])]  # Return this type
    return List[Any]  # If there are different types, return the most generic type

def get_dict_types(d: Dict[Any, Any]) -> Tuple[Type, Type]:
    """generated by gpt4"""
    if not d:  # If the dictionary is empty
        return Dict[Any, Any]  # We can't infer anything about its contents

    # Collect the types of the keys and the values
    key_type = value_type = None

    for key, value in d.items():
        if key_type is None:
            key_type = type(key)
        if value_type is None:
            value_type = type(value)

        # If we find a key or a value of a different type, we'll return a generic dict
        if not isinstance(key, key_type) or not isinstance(value, value_type):
            return Dict[Any, Any]

    return Dict[key_type, value_type]
